1.Responde las siguientes preguntas en la sección de comentarios:

¿Qué es una variable y para qué sirve?
una variable es un espacio que tiene la capacidad de guardar un tipo de dato, ya sea entero, decimal, caracteres o expresiones booleanas. Estas variables nos pueden servir para realizar cómputos, para concatenar información y para evaluar condicionales o bucles.
-¿Cuál es la diferencia entre declarar e inicializar una variable?
El declarar una variable es avisar que reservaras espacio en memoria para un determinado dato, e inicializar una variable es asignarle un valor a una variable que ya esta establecida en memoria de igual manera podemos declarar e inicializar una variable al mismo tiempo.
-¿Cuál es la diferencia entre sumar números y concatenar strings?
La diferencia es que en la suma estamos tomando 2 valores enteros para realizar un computo y retornar o generar un resultado. y en la concatenación únicamente estamos juntando 2 cadenas, esto quiere decir que no estamos realizando ninguna operación aritmética, únicamente estamos juntando 2 datos.
ejemplo de suma aritmética:
4 + 4 //valores enteros, el resultado es 8
4 + “4” // la concatenación es ‘44’
-¿Cuál operador me permite sumar o concatenar?
para sumar o concatenar el símbolo es el siguiente “+”.
4 + 4 //valores enteros, el resultado es 8
4 + “4” // la concatenación es ‘44’
Determina el nombre y tipo de dato para almacenar en variables la siguiente información:
-Nombre: String = string nombre;
-Apellido: String = string apellido;
-Nombre de usuario en Platzi: String = string usuario;
-Edad: Entero = int edad;
-Correo electrónico: String = string correo;
-Mayor de edad: Entero = int mayorEdad = 18;
-Dinero ahorrado: decimal = float ahorros;
-deudas: decimal = float deudas;
3.Traduce a código JavaScript las variables del ejemplo anterior y deja tu código en los comentarios.

var nombre, apellido, nombreUsuario, edad, correoElectronico, dineroAhorrado, deudas;
const mayorEdad=18;
Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)
var nombre="Jorge", apellido = "Del Toro";
console.log(${nombre} ${apellido});
var dineroReal = dineroAhorrado - deudas;
console.log(dineroReal);
FUNCIONES
1-Responde las siguientes preguntas en la sección de comentarios:

¿Qué es una función?
Una función es una subrutina que elabora una determinada tarea que se le programa.
ejemplo de sintaxis:
funtion suma(a, b){
	return a + b;
} 
¿Cuándo me sirve usar una función en mi código?
cuando ciertas instrucciones se repiten y al momento de crear una función podemos agregar ese código que repite muchas veces y reutilizarlo únicamente con la función.

¿Cuál es la diferencia entre parámetros y argumentos de una función?
Ejemplo:

function suma(a, b){
	return a + b;
}
esta función recibe 2 parámetros para realizar la suma, podemos mandarle 2 y 3 como argumento para que lo que nos retorne sea un 5.
entonces parámetros es lo que la función necesita para funcionar, y argumentos es en el momento de ejecución los valores precisos que se le envían para su ejecución.

Convierte el siguiente código en una función, pero, cambiando cuando sea necesario las variables constantes por parámetros y argumentos en una función:
function presentation(name, lastname, completeName, nickname){
	console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
}
CONDICIONALES

¿Qué es un condicional?
Un condicional es evaluar una sentencia, esto quiere decir que si dicha sentencia es verdadera entonces tendra un comportamiento y se realizaran ciertas instrucciones, pero si ese comportamiento o sentencia es falsa entonces tomara el segundo camino para realizar ciertas instrucciones en el dado caso de que sea falso.

¿Qué tipos de condicionales existen en JavaScript y cuáles son sus diferencias?
Existen 2 tipos de condicionales:
switch y if.
ejemplo de estructura if-else:

if(condicion){
	camino verdadero
}else{
	camino falso
}
ejemplo de estructura switch:

switch(caso){
	caso 1:
		instrucciones;
		break;
	caso 2:
		instrucciones;
		break;
	default:
		instrucciones;
		break;
}
las diferencias entre estas 2 estructuras son que en el if-else se pueden ir encadenando, y seguirá validando por cada if, en el dado caso de que entre en uno de estos if encadenados los demás if no se seguirán validando porque no tendría caso ya que encontramos dicha validación y se ejecutaron sus instrucciones. pueden ser múltiples casos y seguir encadenando y anidando si es necesario. pero cabe recalcar que la anidacion y encadenamiento es diferente, ya que la anidacion es un IF dentro de otro IF osea que son independientes.
Ejemplo de if encadenado:

if(condicion){
	instrucciones
}else if(condicion){
	instrucciones
}else if(condicion){
	instrucciones
}else{
	instrucciones
}
si alguna validación se llega a cumplir se ejecutara el bloque de código dentro de esa validación y dejara de evaluar las siguientes condiciones.

¿Puedo combinar funciones y condicionales?
Si, se pueden incluir condicionales dentro de las funciones para realizar validaciones con argumentos, o bien se pueden incluir funciones dentro de condicionales para realizar alguna tarea.

Replica el comportamiento del siguiente código que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

if(tipoDeSuscripcion === "Free"){
	 console.log("Solo puedes tomar los cursos gratis");
}else if(tipoDeSuscripcion === "Basic"){
	console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
}else if(tipoDeSuscripcion === "Expert"){
	console.log("Puedes tomar casi todos los cursos de Platzi durante un año");
}else if(tipoDeSuscripcion === "ExpertPlus"){
	console.log("Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año");
}
Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).

var paquetes = [
	{paquete: "Free", tipoAcceso: "Solo puedes tomar los cursos gratis"},
	{paquete: "Basic", tipoAcceso: "Puedes tomar casi todos los cursos de Platzi durante un mes"},
	{paquete: "Expert", tipoAcceso: "Puedes tomar casi todos los cursos de Platzi durante un año"},
	{paquete: "ExpertPlus", tipoAcceso: "Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año"}
];
var paqueteFiltrado = paquetes.filter(function(paquete){
	return paquete.paquete == "Basic";
});
CICLOS

¿Qué es un ciclo?
Un ciclo es un bloque de código que se ejecutara tantas veces se necesitan hasta que alguna condicion deje de ser verdadera o viceversa.
¿Qué tipos de ciclos existen en JavaScript?
Existen 2: ciclo for y ciclo while
¿Qué es un ciclo infinito y por qué es un problema?
un ciclo infinito puede ocasionar desbordamiento de memoria.
¿Puedo mezclar ciclos y condicionales?
Si, se pueden combinar dentro del mismo bloque de código y también para evaluar la condicion y determinar si el ciclo debe continuar ejecutándose o no.
Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
1-  Bucle 1.
	var i = 0;
	while(i < 5){
		console.log("El valor de i es: " + i);
		i++;
	}
2- Bucle 2.
	var i = 10;
	while(i >= 10){
		console.log("El valor de i es: " + i);
		i--;
	}
Escribe un código en JavaScript que le pregunte a los usuarios cuánto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

let band = true;
while(band === true){
	if(prompt("Cuanto es 2 + 2: ") == 4){
		alert("Respuesta correcta :)");
		band = false;
	}else{
		alert("Intentalo de nuevo");
	}
}
LISTAS

¿Qué es un array?
un array o arreglo, es la coleccion de variables del mismo tipo, ya sea int, float, string, double, char u objetos.
¿Qué es un objeto?
Un objeto es la abstraccion de la realidad modelada en la computadora, con atributos y metodos.
¿Cuándo es mejor usar objetos o arrays?
depende que necesidad se deba cumplir para resolver el problema.
¿Puedo mezclar arrays con objetos o incluso objetos con arrays?
Si, es posible ambas, crear un array de objetos para poder guardarlos. o tener objetos que tengas atributos array.
-Crea una función que pueda recibir cualquier array como parámetro e imprima su primer elemento.
function primerElem(array){
	console.log(array[0]);
}
Crea una función que pueda recibir cualquier array como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

function muestraArray(array){
	for(var i=0; i < array.lenght; i++){
    		console.log(array[i]);
	}
}
Crea una función que pueda recibir cualquier objeto como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
objetos.forEach(function(objeto){
    console.log(objeto);
});